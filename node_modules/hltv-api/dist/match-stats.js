"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getStatsByMatchId = void 0;
const cheerio_1 = __importDefault(require("cheerio"));
const node_fetch_1 = __importDefault(require("node-fetch"));
const config_1 = require("./config");
function getStatsByMatchId(matchId) {
    return __awaiter(this, void 0, void 0, function* () {
        const url = `${config_1.CONFIG.BASE}/${matchId}`;
        try {
            const body = yield (yield node_fetch_1.default(url, {
                headers: { 'User-Agent': 'node-fetch' },
            })).text();
            const $ = cheerio_1.default.load(body, {
                normalizeWhitespace: true,
            });
            const stats = [];
            const allContent = $('.matchstats').find('#all-content');
            const team1Stats = allContent
                .children('table.totalstats')
                .first()
                .children('tbody');
            const list1 = team1Stats.children('tr').not('.header-row');
            list1.each((i, element) => {
                const el = $(element);
                const playerName = el
                    .find('.players .gtSmartphone-only')
                    .text()
                    .replace(/'/g, '');
                const playerId = el.find('.players').children('a').attr('href');
                const kills = parseInt(el.find('td.kd').text().split('-')[0], 10);
                const deaths = parseInt(el.find('td.kd').text().split('-')[1], 10);
                const plusMinus = parseInt(el.find('td.plus-minus').text(), 10);
                const adr = parseFloat(el.find('td.adr').text());
                const kast = parseFloat(el.find('td.kast').text());
                const rating = parseFloat(el.find('td.rating').text());
                const objData = {
                    playerName,
                    playerId,
                    kills,
                    deaths,
                    plusMinus,
                    adr,
                    kast,
                    rating,
                };
                stats.push(objData);
            });
            const team2Stats = allContent
                .children('table.totalstats')
                .last()
                .children('tbody');
            const list2 = team2Stats.children('tr').not('.header-row');
            list2.each((i, element) => {
                const el = $(element);
                const playerName = el
                    .find('.players .gtSmartphone-only')
                    .text()
                    .replace(/'/g, '');
                const playerId = el.find('.players').children('a').attr('href');
                const kills = parseInt(el.find('td.kd').text().split('-')[0], 10);
                const deaths = parseInt(el.find('td.kd').text().split('-')[1], 10);
                const plusMinus = parseInt(el.find('td.plus-minus').text(), 10);
                const adr = parseFloat(el.find('td.adr').text());
                const kast = parseFloat(el.find('td.kast').text());
                const rating = parseFloat(el.find('td.rating').text());
                const objData = {
                    playerName,
                    playerId,
                    kills,
                    deaths,
                    plusMinus,
                    adr,
                    kast,
                    rating,
                };
                stats.push(objData);
            });
            if (!stats.length) {
                throw new Error('Something went wrong, here is no stats found for this match. Please create an issue in this repository https://github.com/dajk/hltv-api');
            }
            return stats;
        }
        catch (error) {
            throw new Error(error);
        }
    });
}
exports.getStatsByMatchId = getStatsByMatchId;
//# sourceMappingURL=match-stats.js.map